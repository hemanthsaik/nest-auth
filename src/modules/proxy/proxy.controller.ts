import { Controller, Get, Next, Req, Res, UseGuards } from '@nestjs/common'
import { ReverseProxyAdminService } from './proxy-admin.service'
import { ReverseProxyGeneralService } from './proxy-general.service'
import { ReverseProxyPaymentService } from './proxy-payment.service'
import { ReverseProxyWalletService } from './proxy-wallet.service'
import { AuthGuard } from './guards/auth.guard'

@Controller('api')
@UseGuards(AuthGuard)
export class ProxyController {
  constructor(
    private readonly reverseProxyAdminService: ReverseProxyAdminService,
    private readonly reverseProxyGeneralService: ReverseProxyGeneralService,
    private readonly reverseProxyPaymentService: ReverseProxyPaymentService,
    private readonly reverseProxyWalletService: ReverseProxyWalletService,
  ) {}
  @Get('current-user')
  currentUser() {
    const userObject = {
      emailId: 'anandhan@payrup.com',
      password: '$2b$10$K1RYUAkk8NNA0hck0lNDOu93GaiLoPAr9NuQ4sz7MpCnkd0R.jZ3u',
      fullName: 'Anandhan Suruli',
      mobileNumber: '9524914940',
      isBlock: 'no',
      resetPasswordToken: 'a7837d69cce78493be332119c2a7a3d4a8b9c282',
      resetPasswordExpires: '1678445873815',
      status: true,
      createdAt: '2023-12-13T11:31:45.620Z',
      updatedAt: '2023-12-13T11:31:45.620Z',
      role: {
        id: 1,
        name: 'admin',
      },
      rolePermission: {
        user: [
          'POST',
          'GET',
          'PUT',
          'PATCH',
          'DELETE',
          'POST',
          'GET',
          'PUT',
          'PATCH',
          'DELETE',
        ],
        blog: [
          'POST',
          'GET',
          'PUT',
          'PATCH',
          'DELETE',
          'POST',
          'GET',
          'PUT',
          'PATCH',
          'DELETE',
        ],
        adminuser: [
          'POST',
          'GET',
          'PUT',
          'PATCH',
          'DELETE',
          'POST',
          'GET',
          'PUT',
          'PATCH',
          'DELETE',
        ],
        support: [
          'POST',
          'GET',
          'PUT',
          'PATCH',
          'DELETE',
          'POST',
          'GET',
          'PUT',
          'PATCH',
          'DELETE',
        ],
        ticket: [
          'POST',
          'GET',
          'PUT',
          'PATCH',
          'DELETE',
          'POST',
          'GET',
          'PUT',
          'PATCH',
          'DELETE',
        ],
        loginhistory: [
          'POST',
          'GET',
          'PUT',
          'PATCH',
          'DELETE',
          'POST',
          'GET',
          'PUT',
          'PATCH',
          'DELETE',
        ],
        prepaidplan: [
          'POST',
          'GET',
          'PUT',
          'PATCH',
          'DELETE',
          'POST',
          'GET',
          'PUT',
          'PATCH',
          'DELETE',
        ],
        prepaidplantab: [
          'POST',
          'GET',
          'PUT',
          'PATCH',
          'DELETE',
          'POST',
          'GET',
          'PUT',
          'PATCH',
          'DELETE',
        ],
        dthplantab: [
          'POST',
          'GET',
          'PUT',
          'PATCH',
          'DELETE',
          'POST',
          'GET',
          'PUT',
          'PATCH',
          'DELETE',
        ],
        dth: [
          'POST',
          'GET',
          'PUT',
          'PATCH',
          'DELETE',
          'POST',
          'GET',
          'PUT',
          'PATCH',
          'DELETE',
        ],
        onepage: [
          'POST',
          'GET',
          'PUT',
          'PATCH',
          'DELETE',
          'POST',
          'GET',
          'PUT',
          'PATCH',
          'DELETE',
        ],
        service: [
          'POST',
          'GET',
          'PUT',
          'PATCH',
          'DELETE',
          'POST',
          'GET',
          'PUT',
          'PATCH',
          'DELETE',
        ],
        slider: [
          'POST',
          'GET',
          'PUT',
          'PATCH',
          'DELETE',
          'POST',
          'GET',
          'PUT',
          'PATCH',
          'DELETE',
        ],
        offer: [
          'POST',
          'GET',
          'PUT',
          'PATCH',
          'DELETE',
          'POST',
          'GET',
          'PUT',
          'PATCH',
          'DELETE',
        ],
        coupon: [
          'POST',
          'GET',
          'PUT',
          'PATCH',
          'DELETE',
          'POST',
          'GET',
          'PUT',
          'PATCH',
          'DELETE',
        ],
        faq: [
          'POST',
          'GET',
          'PUT',
          'PATCH',
          'DELETE',
          'POST',
          'GET',
          'PUT',
          'PATCH',
          'DELETE',
        ],
        profile: [
          'POST',
          'GET',
          'PUT',
          'PATCH',
          'DELETE',
          'POST',
          'GET',
          'PUT',
          'PATCH',
          'DELETE',
        ],
        notification: [
          'POST',
          'GET',
          'PUT',
          'PATCH',
          'DELETE',
          'POST',
          'GET',
          'PUT',
          'PATCH',
          'DELETE',
        ],
        blogcategory: [
          'POST',
          'GET',
          'PUT',
          'PATCH',
          'DELETE',
          'POST',
          'GET',
          'PUT',
          'PATCH',
          'DELETE',
        ],
        subscription: [
          'POST',
          'GET',
          'PUT',
          'PATCH',
          'DELETE',
          'POST',
          'GET',
          'PUT',
          'PATCH',
          'DELETE',
        ],
        kyc: [
          'POST',
          'GET',
          'PUT',
          'PATCH',
          'DELETE',
          'POST',
          'GET',
          'PUT',
          'PATCH',
          'DELETE',
        ],
        giftcardcategory: [
          'POST',
          'GET',
          'PUT',
          'PATCH',
          'DELETE',
          'POST',
          'GET',
          'PUT',
          'PATCH',
          'DELETE',
        ],
        settings: [
          'POST',
          'GET',
          'PUT',
          'PATCH',
          'DELETE',
          'POST',
          'GET',
          'PUT',
          'PATCH',
          'DELETE',
        ],
        giftcardoperator: [
          'POST',
          'GET',
          'PUT',
          'PATCH',
          'DELETE',
          'POST',
          'GET',
          'PUT',
          'PATCH',
          'DELETE',
        ],
        serviceprovider: [
          'POST',
          'GET',
          'PUT',
          'PATCH',
          'DELETE',
          'POST',
          'GET',
          'PUT',
          'PATCH',
          'DELETE',
        ],
        role: [
          'POST',
          'GET',
          'PUT',
          'PATCH',
          'DELETE',
          'POST',
          'GET',
          'PUT',
          'PATCH',
          'DELETE',
        ],
        payment: [
          'POST',
          'GET',
          'PUT',
          'PATCH',
          'DELETE',
          'POST',
          'GET',
          'PUT',
          'PATCH',
          'DELETE',
        ],
        dmt: [
          'POST',
          'GET',
          'PUT',
          'PATCH',
          'DELETE',
          'POST',
          'GET',
          'PUT',
          'PATCH',
          'DELETE',
        ],
        matm: ['POST', 'GET', 'PUT', 'PATCH', 'DELETE'],
      },
    }
    console.log('being called here')
    return userObject
  }

  @Get('admin/*')
  async proxyAdminRequest(@Req() req, @Res() res, @Next() next) {
    const proxyMiddleware = this.reverseProxyAdminService.createAdminProxy()
    return proxyMiddleware(req, res, next)
  }

  @Get('general/*')
  async proxyGeneralRequest(@Req() req, @Res() res, @Next() next) {
    const proxyMiddleware = this.reverseProxyGeneralService.createGeneralProxy()
    return proxyMiddleware(req, res, next)
  }

  @Get('payment/*')
  async proxyPaymentRequest(@Req() req, @Res() res, @Next() next) {
    const proxyMiddleware = this.reverseProxyPaymentService.createPaymentProxy()
    return proxyMiddleware(req, res, next)
  }

  @Get('wallet/*')
  async proxyWalletRequest(@Req() req, @Res() res, @Next() next) {
    const proxyMiddleware = this.reverseProxyWalletService.createWalletProxy()
    return proxyMiddleware(req, res, next)
  }
}
